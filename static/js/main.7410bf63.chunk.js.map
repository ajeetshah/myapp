{"version":3,"sources":["Post.js","index.js"],"names":["Application","props","Filevalidation","event","fi","document","getElementById","files","length","i","fsize","item","size","Math","round","alert","setState","file","URL","createObjectURL","target","handleNameChange","name","value","handleCaptionChange","caption","handleSubmit","preventDefault","info","state","src","alt","width","data","bind","className","onSubmit","this","layout","type","required","aria-required","placeholder","onChange","id","map","index","key","React","Component","Card","ReactDOM","render","destination","querySelector"],"mappings":"+NAGMA,E,kDAEF,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,eAAiB,SAACC,GAChB,IAAMC,EAAKC,SAASC,eAAe,QAEnC,GAAIF,EAAGG,MAAMC,OAAS,EAClB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAGG,MAAMC,OAAS,EAAGC,IAAK,CAE3C,IAAMC,EAAQN,EAAGG,MAAMI,KAAKF,GAAGG,KAClBC,KAAKC,MAAOJ,EAAQ,OAErB,KACRK,MACE,iEAEF,EAAKC,SAAS,CACxBC,KAAMC,IAAIC,gBAAgBhB,EAAMiB,OAAOb,MAAM,QA1B9B,EAmCnBc,iBAAmB,SAAClB,GAClB,EAAKa,SAAS,CAAEM,KAAMnB,EAAMiB,OAAOG,SApClB,EAuCnBC,oBAAsB,SAACrB,GACrB,EAAKa,SAAS,CAAES,QAAStB,EAAMiB,OAAOG,SAxCrB,EA4CnBG,aAAe,SAAAvB,GACbA,EAAMwB,iBACN,IAAMC,EAAO,CAACN,KAAM,EAAKO,MAAMP,KAAMG,QAAS,EAAKI,MAAMJ,QAASR,KAAK,yBAAKa,IAAK,EAAKD,MAAMZ,KAAMc,IAAI,OAAOC,MAAM,SAC7GC,EAAI,sBAAO,EAAKJ,MAAMI,MAAlB,CAAwBL,IAClC,EAAKZ,SAAS,CACZiB,KAAMA,KA/CR,EAAKJ,MAAQ,CACXZ,KAAM,KACNK,KAAK,KACLG,QAAQ,KACRQ,KAAK,IAGP,EAAK/B,eAAiB,EAAKA,eAAegC,KAApB,gBATL,E,qDA4DjB,OACI,yBAAKC,UAAU,YAAYC,SAAUC,KAAKX,cACxC,uEAEA,6BAEA,yBAAKS,UAAU,OACb,0BAAMA,UAAU,cAAcG,OAAO,UACrC,yBAAKH,UAAU,oCACb,2BACII,KAAK,OACLC,UAAQ,EAACC,gBAAc,OACvBN,UAAU,oCACVO,YAAY,WACZnB,MAAOc,KAAKR,MAAMP,KAClBqB,SAAUN,KAAKhB,mBAGjB,2BACIkB,KAAK,OACLC,UAAQ,EAACC,gBAAc,OACvBN,UAAU,eACVO,YAAY,UACZnB,MAAOc,KAAKR,MAAMJ,QAClBkB,SAAUN,KAAKb,sBAGrB,2BACMe,KAAK,OACLK,GAAG,OACHJ,UAAQ,EAACC,gBAAc,OACvBN,UAAU,eACVO,YAAY,OACZC,SAAUN,KAAKnC,kBAKrB,4BAAQqC,KAAK,SAASJ,UAAU,mBAAhC,UAKJ,yBAAKA,UAAU,OAEXE,KAAKR,MAAMI,KAAKY,KAAI,SAACjB,EAAMkB,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAKD,EAAOlB,KAAMA,a,GA3GnDoB,IAAMC,WAuHxBC,EAAO,SAAAjD,GAAK,OAChB,yBAAKkC,UAAU,aACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,cAAa,4CAAwBlC,EAAM2B,KAAKN,KAA7D,KACA,uBAAGa,UAAU,aAAY,2CAAuBlC,EAAM2B,KAAKH,UAE3D,yBAAKU,UAAU,aAAY,uBAAGA,UAAU,aACtC,uCAAmBlC,EAAM2B,KAAKX,KADL,QAMjCkC,IAASC,OACL,kBAAC,EAAD,MACA/C,SAASC,eAAe,cAGbN,QCtIbqD,EAAchD,SAASiD,cAAc,cAEzCH,IAASC,OACL,6BACI,kBAAC,EAAD,OAEJC,I","file":"static/js/main.7410bf63.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nclass Application extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        file: null,\r\n        name:null,\r\n        caption:null,\r\n        data:[],\r\n       \r\n      }\r\n      this.Filevalidation = this.Filevalidation.bind(this)\r\n    }\r\n    //Validates the image selected.\r\n    Filevalidation = (event) => { \r\n      const fi = document.getElementById('file'); \r\n      // Check if any file is selected. \r\n      if (fi.files.length > 0) { \r\n          for (var i = 0; i <= fi.files.length - 1; i++) { \r\n\r\n              const fsize = fi.files.item(i).size; \r\n              const file = Math.round((fsize / 1024)); \r\n              // Validating the size of the file. \r\n              if (file >= 2048) { \r\n                  alert( \r\n                    \"File is too big, please select a file with size less than 2mb\"); \r\n              }  else { \r\n                  this.setState({\r\n        file: URL.createObjectURL(event.target.files[0]),})//returns the image if size<2mb\r\n                 \r\n               \r\n          } \r\n      } \r\n  }}\r\n\r\n    \r\n\r\n    handleNameChange = (event) => {\r\n      this.setState({ name: event.target.value});\r\n    };\r\n\r\n    handleCaptionChange = (event) => {\r\n      this.setState({ caption: event.target.value});\r\n    };\r\n\r\n    \r\n    handleSubmit = event => {\r\n      event.preventDefault();\r\n      const info = {name: this.state.name, caption: this.state.caption, file:<img src={this.state.file} alt=\"icon\" width=\"600\" />}\r\n      const data = [...this.state.data, info];\r\n      this.setState({\r\n        data: data\r\n      });\r\n    };\r\n\r\n    \r\n   \r\n  \r\n    \r\n      \r\n    render() {\r\n       \r\n      return (\r\n          <div className=\"container\" onSubmit={this.handleSubmit}>\r\n            <h1>Post your images with a quirky caption!</h1>\r\n  \r\n            <hr/>\r\n  \r\n            <div className=\"row\">\r\n              <form className=\"form-inline\" layout=\"inline\">\r\n              <div className=\"input-group mb-2 mr-sm-2 mb-sm-0\">\r\n                <input\r\n                    type=\"text\"\r\n                    required aria-required=\"true\"//Ensures non-empty input.\r\n                    className=\"form-control mb-2 mr-sm-2 mb-sm-0\"\r\n                    placeholder=\"username\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleNameChange}/>\r\n\r\n                \r\n                  <input\r\n                      type=\"text\"\r\n                      required aria-required=\"true\"\r\n                      className=\"form-control\"//Ensures non-empty input.\r\n                      placeholder=\"caption\"\r\n                      value={this.state.caption}\r\n                      onChange={this.handleCaptionChange}/>\r\n              \r\n                \r\n                <input\r\n                      type=\"file\"\r\n                      id=\"file\"\r\n                      required aria-required=\"true\"//Ensures non-empty input.\r\n                      className=\"form-control\"\r\n                      placeholder=\"post\"\r\n                      onChange={this.Filevalidation}/>\r\n                      \r\n                      \r\n                  </div>\r\n                      \r\n                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n                \r\n              </form>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              {\r\n                this.state.data.map((info, index) => <Card key={index} info={info}/>)\r\n              }\r\n            </div>\r\n  \r\n            \r\n  \r\n          </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  //Display after submitting.\r\n  const Card = props =>\r\n    <div className=\"card-mb-3\">\r\n      <div className=\"card-body\">\r\n        <p className=\"card-title\"><span>Username: </span>{props.info.name} </p>\r\n        <p className=\"card-text\"><span> caption:</span>{props.info.caption}</p>\r\n        </div>\r\n        <div className=\"card-post\"><p className=\"card-post\">\r\n          <span>Post:</span>{props.info.file} </p>\r\n        </div>\r\n    </div>\r\n  ;\r\n  \r\n  ReactDOM.render(\r\n      <Application/>,\r\n      document.getElementById('container')\r\n  );\r\n\r\n  export default Application;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Application from \"./Post\";\r\n\r\nvar destination = document.querySelector(\"#container\");\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <Application/>\r\n    </div>,\r\n    destination\r\n\r\n)"],"sourceRoot":""}